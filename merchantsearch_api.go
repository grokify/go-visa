/*
 * Visa API
 *
 * This is a quick Swagger Spec for the Visa API
 *
 * OpenAPI spec version: 1.0.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

package visa

import (
	"encoding/json"
	"fmt"
	"net/url"
	"strings"
)

type MerchantsearchApi struct {
	Configuration *Configuration
}

func NewMerchantsearchApi() *MerchantsearchApi {
	configuration := NewConfiguration()
	return &MerchantsearchApi{
		Configuration: configuration,
	}
}

func NewMerchantsearchApiWithBasePath(basePath string) *MerchantsearchApi {
	configuration := NewConfiguration()
	configuration.BasePath = basePath

	return &MerchantsearchApi{
		Configuration: configuration,
	}
}

/**
 * Add a new pet to the store
 *
 *
 * @param body Pet object that needs to be added to the store
 * @return *MerchantSearchResponse
 */
func (a MerchantsearchApi) SearchMerchant(body MerchantSearchRequest) (*MerchantSearchResponse, *APIResponse, error) {

	var localVarHttpMethod = strings.ToUpper("Post")
	// create path and map variables
	localVarPath := a.Configuration.BasePath + "/merchantsearch/v1/search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := make(map[string]string)
	var localVarPostBody interface{}
	var localVarFileName string
	var localVarFileBytes []byte
	// authentication '(basicAuth)' required
	// http basic authentication required
	if a.Configuration.Username != "" || a.Configuration.Password != "" {
		localVarHeaderParams["Authorization"] = "Basic " + a.Configuration.GetBasicAuthEncodedString()
	}
	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		localVarHeaderParams[key] = a.Configuration.DefaultHeader[key]
	}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
		localVarHeaderParams["Content-Type"] = "application/json" //JCW
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHttpHeaderAccept = "application/json"
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	localVarPostBody = &body
	var successPayload = new(MerchantSearchResponse)
	localVarHttpResponse, err := a.Configuration.APIClient.CallAPI(localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)

	var localVarURL, _ = url.Parse(localVarPath)
	localVarURL.RawQuery = localVarQueryParams.Encode()

	fmt.Printf("URL: %v\n", localVarURL.String()) // JCW
	//	{"responseStatus":{"code":"9004","severity":"ERROR","info":"","status":405,"message":"Method Not Allowed"}}
	localVarURLString := "https://sandbox.api.visa.com/merchantsearch/v1/search"
	fmt.Printf("URL: %v\n", localVarURLString)     // JCW
	localVarHttpMethod = "POST"                    //JCW
	fmt.Printf("METHOD: %v\n", localVarHttpMethod) // JCW

	var localVarAPIResponse = &APIResponse{Operation: "SearchMerchant", Method: localVarHttpMethod, RequestURL: localVarURLString}
	if localVarHttpResponse != nil {
		localVarAPIResponse.Response = localVarHttpResponse.RawResponse
		localVarAPIResponse.Payload = localVarHttpResponse.Body()
	}

	if err != nil {
		return successPayload, localVarAPIResponse, err
	}
	fmt.Println(string(localVarHttpResponse.Body()))
	err = json.Unmarshal(localVarHttpResponse.Body(), &successPayload)
	return successPayload, localVarAPIResponse, err
}
